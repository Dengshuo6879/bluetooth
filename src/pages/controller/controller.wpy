<style>
.bg {
  position: fixed;
  height: 100%;
  width: 100%;
  top: 0;
  z-index: -1;
}
.batteryContainer {
  position: relative;
  padding: 0 18px;
}
.batteryContainer:after {
  content: '';
  display: block;
  clear: both;
}
.bgImg {
  width: 100%;
  height: 100%;
}
.control {
  margin: 100rpx auto 0;
  position: relative;
  padding: 0 15rpx;
}
.control-container {
  margin-top: 60rpx;
  padding: 20rpx 30rpx;
  text-align: center;
}

.controll-box {
  padding: 20rpx 30rpx;
  /* border: 1px solid #ddd; */
  border-radius: 20rpx;
  margin: 60rpx;
  background: #3fcac0;
  color: #fff;
}
.disconnect {
  position: fixed;
  bottom: 70rpx;
  right: 0;
}
.time {
  width: 140px;
  height: 140px;
  position: relative;
  text-align: center;
  /* display: flex; */
  margin: 0 auto;
}
.bgCanvas {
  /* width: 100%;
  height: 100%; */
  /* position: absolute; */
  margin: auto;
}
.stepText {
  font-weight: bold;
  font-size: 50rpx;
  color: #3fcac0;
  position: absolute;
  height: 140px;
  width: 140px;
  line-height: 140px;
  text-align: center;
  top: 10px;
}
.battery {
  position: absolute;
  top: -90rpx;
  left: 10rpx;
  border: 1px solid #ccc;
  width: 70rpx;
  height: 30rpx;
  padding: 3rpx;
  border-radius: 5rpx;
}
.batteryHead {
  position: absolute;
  top: -77rpx;
  left: 85rpx;
  background: #ccc;
  width: 12rpx;
  height: 12rpx;
  border-radius: 5rpx;
}
.batteryValue {
  width: 100%;
  height: 100%;
  background: #3fcac0;
  border-radius: 5rpx;
}
.batteryText {
  position: absolute;
  color: #ccc;
  top: -97rpx;
  left: 105rpx;
}
/* .controlContainer{
  display:flex;
  justify-content: space-between;
  padding-top:150rpx;
} */
/* .time{ */
/* flex:0 0 140px; */
/* } */
.moduleLeft {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.moduleRight {
  align-self: center;
}
</style>
<template>
  <view class='control'>
    <view class='batteryContainer'>
      <view class='battery'>
        <view class='batteryValue' style="width: {{batteryValue}}%; background: {{batteryValue< 30? 'red':'#3fcac0'}}"></view>
      </view>
      <view class='batteryHead'>
      </view>
      <view class='batteryText'>{{batteryValue}}%</view>
    </view>
    <view class=controlContainer>
      <view class='time control-container'>
        <canvas canvas-id='bgCanvas' style="border:1px solid transparent;width:140px;height:140px"></canvas>
        <view class='stepText'>
          <view style="height: 20px;">{{stepText}}min</view>
        </view>
      </view>
      <view class='control-container'>
        <text class='controll-box' data-name="开始" data-character-val="5A33A5">开始</text>
      </view>
      <view class='control-container'>
        <text class='controll-box' @tap="writeVal" data-name="模式加" data-character-val="5A44A5">模式加</text>
        <text data-name="模式加" style="color: #999">模式1</text>
        <text class='controll-box' @tap="writeVal" data-name="模式减" data-character-val="5A55A5">模式减</text>
      </view>
      <view class='control-container'>
        <text class='controll-box' @tap="writeVal" data-name="关机" data-character-val="5A11A5">关机</text>
        <!-- <text class='controll-box' @tap="writeVal" data-name="强度加" data-character-val="5A22A5">强度加</text> -->
      </view>
    </view>

    <view class='disconnect'>
      <text class='controll-box' @tap="unconnect" data-name="断开蓝牙连接">断开蓝牙连接</text>
    </view>
    <!-- <view class='bg'>
    <image class='bgImg' src='./img/bg.jpg'></image>
  </view> -->
  </view>
</template>
<script>
import wepy from 'wepy';
const ctx = wx.createCanvasContext('bgCanvas');
var valHandle; //定时器
export default class Controller extends wepy.page {
  data = {
    sendCharacterVal: '',
    deviceId: '',
    serviceId: '',
    characteristicId: '',
    operatorName: '',
    allowReConnCount: 3,
    reConnCount: 0,

    stepText: 0, //设置倒计时初始值
    batteryValue: 24 // 设置电池值
  };
  methods = {
    writeVal(e) {
      let that = this;
      console.log(e.currentTarget.dataset.characterVal);
      that.sendCharacterVal = e.currentTarget.dataset.characterVal;
      that.operatorName = e.currentTarget.dataset.name;
      that.$apply();
      console.log(that.data);
      that.sendValToBlueTooth();
    },
    unconnect() {
      let that = this;
      wx.closeBLEConnection({
        deviceId: that.deviceId,
        success(res) {
          console.log(res);
          wx.showModal({
            content: '蓝牙已成功断开',
            showCancel: false,
            confirmText: '我知道了',
            complete(res) {
              wx.navigateBack({
                delta: 1
              });
            }
          });
          that.$parent.globalData.initData = 1;
          that.$apply();
          wx.setStorageSync('noreload', 1);
          //      wx.redirectTo({
          //        url: '/pages/index/index'
          //      })
        }
      });
    }
  };
  watch = {
    stepText: function() {
      this.drawTime();
    }
  };
  hexStringToArrayBuffer(str) {
    if (!str) {
      return new ArrayBuffer(0);
    }
    var bufferLen = parseInt(str.length / 2);
    var buffer = new ArrayBuffer(bufferLen);
    let dataView = new DataView(buffer);
    let ind = 0;
    for (var i = 0, len = str.length; i < len; i += 2) {
      let code = '0x' + str.substr(i, 2);
      dataView.setUint8(ind, code);
      if (ind > bufferLen) {
        break;
      }
      ind++;
    }
    return buffer;
  }
  connectDeviceStateChange() {
    let that = this;
    wx.onBLEConnectionStateChange(function(res) {
      // 该方法回调中可以用于处理连接意外断开等异常情况
      console.log(
        `马蒂 是这个页面吗 device ${
          res.deviceId
        } state has changed, connected: ${res.connected}`
      );
      wx.showLoading({
        title: '重连蓝牙中...'
      });
      if (!res.connected && that.deviceId) {
        console.log('begin connecnt');
        wx.createBLEConnection({
          deviceId: that.deviceId,
          success(res) {
            wx.showToast({
              title: '重连成功',
              icon: 'none',
              duration: 2000
            });
          },
          fail() {
            console.log('reconnect failed');
            wx.showModal({
              content: '连接的蓝牙已中断，返回首页重新连接',
              showCancel: false,
              confirmText: '我知道了',
              complete(res) {
                wx.setStorageSync('noreload', 1);
                //                wx.redirectTo({
                //                  url: '/pages/index/index?noSearch=1'
                //                })
                that.$parent.globalData.initData = 1;
                that.$apply();
                wx.navigateBack({
                  delta: 1
                });
              }
            });
          },
          complete() {
            wx.hideLoading();
          }
        });
      }
    });
  }
  sendValToBlueTooth() {
    var that = this;
    //    let buffer = new ArrayBuffer(1)
    //    let dataView = new DataView(buffer)
    //    dataView.setUint8(0, that.sendCharacterVal)
    console.log('发送数据');
    console.log('sendCharacterVal', that.sendCharacterVal);
    wx.showLoading({
      title: '执行操作中...'
    });
    let buffer = that.hexStringToArrayBuffer(that.sendCharacterVal);
    console.log('buffer', buffer);
    wx.writeBLECharacteristicValue({
      deviceId: that.deviceId,
      serviceId: that.serviceId,
      characteristicId: that.characteristicId,
      value: buffer,
      success: function(res) {
        wx.hideLoading();
        console.log('success  指令发送成功');
        wx.showToast({
          title: that.operatorName + '指令发送成功',
          duration: 2000,
          icon: 'none'
        });
      },
      fail: function(res) {
        // fail
        wx.hideLoading();
        console.log(res);
        let msg = '';
        if (res.errCode == 10007) {
          msg = '当前特征值不支持此操作';
        } else if (res.errCode == 10003) {
          msg = '连接失败';
        } else if (res.errCode == 10006) {
          msg = '当前连接已断开'; // todo 是否重新连接
        } else {
          msg = '系统繁忙，请稍后再试';
        }
        wx.showToast({
          title: msg,
          duration: 2000,
          icon: 'none'
        });
      }
    });
  }
  onLoad(options) {
    let deviceId = options.deviceId;
    let serviceId = options.serviceId;
    let characteristicId = options.characteristicId;
    this.deviceId = deviceId;
    this.serviceId = serviceId;
    this.characteristicId = characteristicId;
    this.$apply();
    this.connectDeviceStateChange();

    this.drawTime(this.stepText);
  }

  drawTime(val) {
    const valPercent = val / 60 * 2 - 0.5;
    ctx.setLineWidth(10);
    ctx.arc(70, 70, 60, 0, 2 * Math.PI);
    ctx.setStrokeStyle('#eeeeee');
    ctx.stroke();

    ctx.beginPath();
    ctx.setLineCap('round');
    if(val == 0){
      ctx.setLineWidth(0.1);
    }else{
      ctx.setLineWidth(12);
    }
    ctx.arc(70, 70, 60, -0.5 * Math.PI, valPercent * Math.PI);
    ctx.setStrokeStyle('#3fcac0');
    ctx.stroke();
    ctx.draw();
  }
}
</script>
