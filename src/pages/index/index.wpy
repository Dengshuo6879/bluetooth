<style lang="less">
.userinfo {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.userinfo-avatar {
  width: 80rpx;
  height: 80rpx;
  border-radius: 50%;
}

.userinfo-nickname {
  color: #aaa;
}
.listContainer {
  margin-top: 30rpx;
  padding: 0 20rpx;
}
.listText {
  height: 80rpx;
  line-height: 80rpx;
  color: #3fcac0;
}
.divider {
  float: left;
  width: 10rpx;
  height: 40rpx;
  margin-right: 12rpx;
  margin-top: 22rpx;
  background: #3fcac0;
}
.listItem {
  height: 100rpx;
  line-height: 100rpx;
  padding-left: 10px;
  color: #3fcac0;
  background: #f7f7f7;
  border-radius: 10rpx;
  margin-bottom: 15rpx;
}
.linkedItem {
  height: 100rpx;
  line-height: 100rpx;
  padding-left: 10px;
  color: #f7f7f7;
  background: #3fcac0;
  border-radius: 10rpx;
  margin-bottom: 15rpx;
}
.rightTriangle {
  float: right;
  margin-right: 20rpx;
  margin-top: 30rpx;
  width: 0;
  height: 0;
  border-width: 20rpx 0 20rpx 20rpx;
  border-style: solid;
  border-color: transparent transparent transparent #fff;
}
</style>
<template>
  <view class='listContainer'>
    <block wx:if="{{!showBlueToothDetail}}">
      <view class='listText'>
        <span class='divider'></span>{{showTips}}
      </view>
    </block>
    <view wx:else @tap="toController">
      <view class='listText'>
        <span class='divider'></span>已连接的蓝牙设备
      </view>
      <view class='linkedItem'>
        {{name!=''?name:deviceId}}
        <span class='rightTriangle'></span>
      </view>
    </view>
    <!-- <view data-device-id="{{item.deviceId}}" data-item-detail="{{item}}" @tap="connectDevice" wx:for="{{devicesList}}">
      {{item.name}}  {{item.deviceId}}
    </view> -->
  </view>

  <!-- <view class='listContainer'>
    <view class='listText'>
      <span class='divider'></span>搜索到的蓝牙设备
    </view>
    <block wx:if="{{devicesList.length>0}}">
      <view class='listItem' data-device-id="{{item.deviceId}}" data-item-detail="{{item}}" @tap="connectDevice" wx:for="{{devicesList}}">
        <text wx:if="{{item.name !=''}}">{{item.name}}</text>
        <text wx:else>{{item.deviceId}}</text>
      </view>
    </block>
    <view class='listItem' wx:else>
      暂无搜索到的蓝牙设备
    </view>
  </view> -->
</template>

<script>
import wepy from 'wepy'

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '首页',
    enablePullDownRefresh: true,
    backgroundTextStyle: 'dark'
  };

  data = {
    deviceId: '',
    searchDeviceId: '',
    name: '',
    serviceId: '',
    characteristicId: [],
    searchDetail: {},
    showBlueToothDetail: false,
    showTips: '暂时还未连接到蓝牙设备',
    devicesList: [],
    hadSearch: false,
    hideLoading: false
  };

  methods = {
    connectDevice(e) {
      console.log('enter connectDevice....')
      console.log(e.currentTarget.dataset)
      let curDeviceId = e.currentTarget.dataset.deviceId
      let itemDetail = e.currentTarget.dataset.itemDetail
      this.searchDeviceId = curDeviceId
      this.searchDetail = itemDetail
      this.hideLoading = true
      this.$apply()
      this.search(true)
    },
    toController() {
      console.log('todata', this.data)
      wx.navigateTo({
        url:
          '/pages/controller/controller?deviceId=' +
          this.deviceId +
          '&serviceId=' +
          this.serviceId +
          '&characteristicId=' +
          JSON.stringify(this.characteristicId)
      })
    }
  };
  toToController(){
    console.log('todata2', this.data)
      wx.navigateTo({
        url:
          '/pages/controller/controller?deviceId=' +
          this.deviceId +
          '&serviceId=' +
          this.serviceId +
          '&characteristicId=' +
          JSON.stringify(this.characteristicId)
      })
  };
  autoConnectDevice(data){
      console.log('data',data);
      this.searchDeviceId =data.deviceId;
      this.searchDetail = data;
      this.hideLoading = true
      this.$apply()
      this.search(true)
  };
  updateBlueToothDevices() {
    console.log('enter updateBlueToothDevices....')
    let that = this
    wx.getBluetoothDevices({
      success(res) {
        console.log('update', res)
        let devicesArr = res.devices
        let oldDeviceList = that.devicesList
        for (let i = 0, len = devicesArr.length; i < len; i++) {
          let t = oldDeviceList.findIndex(function(item, index, arr) {
            if (item['deviceId'] == devicesArr[i]['deviceId']) {
              return index + 1
            }
          })
          if (t == -1) {
            var name = ''
            let curSearchDeviceId = devicesArr[i]['deviceId']
            if (curSearchDeviceId != that.deviceId){
              if (devicesArr[i]['name'] != ' ' && devicesArr[i]['name'] != '未知设备') {
                name = devicesArr[i]['name']
              } else if (devicesArr[i]['localName'] != ' ' && devicesArr[i]['name'] != '未知设备') {
                name = devicesArr[i]['localName']
              }
              that.devicesList.push({
                deviceId: devicesArr[i]['deviceId'],
                name: devicesArr[i]['name']
              })
              that.$apply()
            }
          }
        }
      }
    })
  }
  initData() {
    console.log('enter initData')
    let that = this
    that.deviceId = ''
    that.searchDeviceId = ''
    that.name = ''
    that.serviceId = ''
    that.characteristicId = []
    that.searchDetail = { }
    that.showBlueToothDetail = false
    that.$apply()
  }
  removeConnectedDevice() {
    console.log('enter removeConnectedDevice....')
    let that = this
    let devicesList = that.devicesList
    console.log('that.deviceId', that.deviceId)
    let t = devicesList.findIndex(function(item, index, arr) {
      console.log('item', item)
      if (item['deviceId'] == that.deviceId) {
        console.log('eee')
        console.log('index', index)
        return index + 1
      }
    })
    console.log('t', t)
    if (t != -1) {
      console.log('that.devicesList', that.devicesList)
      that.devicesList.splice(t, 1)
      console.log('that.devicesList', that.devicesList)
      that.$apply()
    }
  }
  connectDeviceStateChange() {
    console.log('enter connectDeviceStateChange....')
    let that = this
    wx.onBLEConnectionStateChange(function (res) {
      // 该方法回调中可以用于处理连接意外断开等异常情况
      console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)
      if (!res.connected) {
        wx.createBLEConnection({
          deviceId: that.deviceId,
          success(res) {
            console.log('reconnect succ')
          },
          fail() {
            console.log('reconnect failed')
            that.initData()
            wx.showModal({
              content: '连接的蓝牙已中断，请检查连接的蓝牙是否正常',
              showCancel: false,
              confirmText: '我知道了'
            })
          }
        })
      }
    })
  }
  connectBLEZDevice() {
    console.log('enter connectBLEZDevice....')
    let that = this
    let devicesId = that.searchDeviceId
    console.log('enter connectDevice', devicesId)
    wx.showLoading({
      title: '蓝牙连接中...'
    })
    wx.createBLEConnection({
      deviceId: devicesId,
      success: res => {
        // 连接蓝牙设备成功
        console.log('deviceId', devicesId)
        console.log(res)
        wx.hideLoading()
        wx.showToast({
          title: '连接蓝牙成功...',
          duration: 2000,
          icon: 'none'
        })
        // console.log(that.devicesList)
        that.showBlueToothDetail = true
        console.log('that.searchDetail',that.searchDetail);
        that.deviceId = that.searchDetail.deviceId
        that.name = that.searchDetail.name
        that.$apply()
        that.removeConnectedDevice()
        // that.listBlueTooth()
        that.connectDeviceStateChange()
        wx.getBLEDeviceServices({
          deviceId: devicesId,
          success(res) {
            // 获取服务id成功
            that.serviceId = res.services[1].uuid
            let serviceId = res.services[1].uuid
            that.$apply()
            wx.getBLEDeviceCharacteristics({
              deviceId: devicesId,
              serviceId: serviceId,
              success(res) {
                console.log(
                  'device getBLEDeviceCharacteristics:',
                  res.characteristics
                )
                let characteristics = res.characteristics
                  console.log('characteristics',characteristics);
                  var i=0;
                  while(characteristics[i]){
                      that.characteristicId[i]=characteristics[i].uuid;
                      i++;
                  }
                  console.log('that.characteristicId',that.characteristicId);
                  that.toToController();
              }
            })
          }
        })
      },
      fail: res => {
        wx.hideLoading()
        console.log('连接蓝牙设备失败', res)
        if (res.errCode != -1) {
          wx.showToast({
            title: '连接蓝牙失败,请稍后再试',
            duration: 2000,
            icon: 'none'
          })
        }
      }
    })
  }
  foundCallback(res) {
    console.log('enter foundCallback....')
    let that = this
    let devices = res.devices
    for (let i = 0; i < devices.length; i++) {
      //        let advertisData = devices[i].advertisData
      if (that.data.searchDeviceId != '') {
      } else {
        let devicesList = that.devicesList
        let t = devicesList.findIndex(function(item, index, arr) {
          if (item['deviceId'] == devices[i].deviceId) {
            return index
          }
        })
        if (t == -1) {
          var name = ''
          console.log('devices', devices[i])
          if (devices[i].name != ' ' && devices[i].name != '未知设备') {
            name = devices[i].name
          } else if (devices[i].localName != ' ' && devices[i].localName != '未知设备') {
            name = devices[i].localName
          }
          console.log('name',name);

          // if(name.indexOf('Test')>=0){
          if(name.indexOf('SMKJ')>=0){
            that.autoConnectDevice({
              deviceId: devices[i].deviceId,
              name: name
            });
          }
          // that.devicesList.push({
          //   deviceId: devices[i].deviceId,
          //   name: name
          // })
          // that.$apply()
        }
      }
    }
  }
  listBlueTooth() {
    console.log('enter listBlueTooth....')
    let that = this
    let devicesArr = []
    wx.getBluetoothDevices({
      success(res) {
        let deviceList = res.devices
        deviceList.forEach((i, index) => {
          if (i.deviceId != that.deviceId) {
            var name = ''
            if (i.name != ' ' && i.name != '未知设备') {
              name = i.name
            }
            devicesArr.push({
              deviceId: i.deviceId,
              name: name
            })
          }
        })
        that.devicesList = devicesArr
        that.$apply()
      }
    })
  }
  search(isConn = false) {
    console.log('enter search....')
    let that = this
    that.hadSearch = true
    that.$apply()
    wx.startBluetoothDevicesDiscovery({
      services: [], // todo 填写uuid 'FB00'
      success(res) {
        console.log('discovery', res)
        if (!that.hideLoading) {
          wx.showLoading({
            title: '搜索中...'
          })
        }
        that.hideLoading = false
        that.$apply()
        if (that.data.searchDeviceId != '' && isConn) {
          console.log('enterxxx', that.data.searchDeviceId)
          that.connectBLEZDevice()
        }
        that.foundCallback = that.foundCallback.bind(that)
        wx.onBluetoothDeviceFound(that.foundCallback)
        setTimeout(function() {
          wx.hideLoading()
          console.log('搜索设备结束')
          wx.stopBluetoothDevicesDiscovery({})
          wx.stopPullDownRefresh()
        }, 10000)
      },
      fail(res){
        console.log('enter failed...');
        console.log(res);
      }
    })
  }
  connect() {
    console.log('enter connect....')
    let that = this
    wx.openBluetoothAdapter({
      success(res) {
        console.log('res', res)
        wx.getBluetoothAdapterState({
          success: function(res) {
            console.log('state', res)
            if (!!res && res.available) {
              if (!res.discovering) {
                that.search()
              }
            } else if (!res.available) {
              wx.showToast({
                title: '设备无法开启蓝牙连接!',
                duration: 2000,
                icon: 'none'
              })
            }
          }
        })
      },
      fail(res) {
        wx.showModal({
          content: '请开启手机蓝牙后再试!',
          showCancel: false,
          confirmText: '我知道了'
        })
        wx.onBluetoothAdapterStateChange(function(res) {
          console.log('adapterState changed, now is', res)
          if (res.available && that.hadSearch == false) {
            that.search()
          }
        })
      }
    })
  }
  onPullDownRefresh() {
    console.log('下拉刷新')
    this.search()
  }
  onShow() {
    var value = wx.getStorageSync('noreload')
    var initdata = this.$parent.globalData.initData
    if (initdata) {
      this.initData()
      // this.listBlueTooth()
      this.$parent.globalData.initData = 0
      this.$apply()
    }
    if (value != 1) {
      console.log('not from controller.page')
      this.connect()
    }
    wx.setStorageSync('noreload', 0)
  }
//  onLoad() {
//    this.connect()
//  }
}
</script>
